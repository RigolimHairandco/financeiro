import React, { useState, useEffect, useMemo } from 'react';
import { onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { collection, query, where, getDocs, orderBy, onSnapshot, addDoc, doc, updateDoc, getDoc, writeBatch, deleteDoc, Timestamp } from 'firebase/firestore';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { auth, db } from './firebase';
import { useAuth } from './hooks/useAuth';
import { useExpenseCategories, useIncomeCategories } from './hooks/useCategories';
import { useWindowSize } from './hooks/useWindowSize';
import Icon from './components/ui/Icon';
import CategoryIcon from './components/ui/CategoryIcon';
import AlertModal from './components/modals/AlertModal';
import ConfirmationModal from './components/modals/ConfirmationModal';
import PaymentModal from './components/modals/PaymentModal';
import SummaryCard from './components/dashboard/SummaryCard';
import TransactionForm from './components/transactions/TransactionForm';
import TransactionItem from './components/transactions/TransactionItem';
import DebtForm from './components/debts/DebtForm';
import DebtItem from './components/debts/DebtItem';


// --- HOOKS ---
function useTransactions(userId) {
    const [transactions, setTransactions] = useState([]);
    useEffect(() => {
        if (!userId) { setTransactions([]); return; }
        const q = query(collection(db, `users/${userId}/transactions`), orderBy("timestamp", "desc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            setTransactions(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        });
        return () => unsubscribe();
    }, [userId]);
    return transactions;
}
function useDebts(userId) {
    const [debts, setDebts] = useState([]);
    useEffect(() => {
        if (!userId) { setDebts([]); return; }
        const q = query(collection(db, `users/${userId}/debts`), orderBy("createdAt", "asc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            setDebts(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        });
        return () => unsubscribe();
    }, [userId]);
    return debts;
}

// --- COMPONENTES DE UI ---
const LoginScreen = ({ onLogin }) => { const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [error, setError] = useState(''); const [showPassword, setShowPassword] = useState(false); const handleLoginSubmit = (e) => { e.preventDefault(); if (!email || !password) { setError('Por favor, preencha e-mail e senha.'); return; } onLogin(email, password); }; return ( <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4"><div className="w-full max-w-md p-8 space-y-8 bg-white rounded-2xl shadow-lg"><div className="text-center"><Icon name="wallet" className="mx-auto text-indigo-600" size={48} /><h2 className="mt-6 text-3xl font-bold text-gray-900">Aceder ao Gestor Financeiro</h2><p className="mt-2 text-sm text-gray-600">Use as suas credenciais para entrar.</p></div><form className="mt-8 space-y-6" onSubmit={handleLoginSubmit}><div className="rounded-md shadow-sm -space-y-px"><div><input id="email-address" name="email" type="email" autoComplete="email" required className="appearance-none rounded-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500" placeholder="E-mail" value={email} onChange={(e) => setEmail(e.target.value)} /></div><div className="relative"><input id="password" name="password" type={showPassword ? "text" : "password"} autoComplete="current-password" required className="appearance-none rounded-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500" placeholder="Senha" value={password} onChange={(e) => setPassword(e.target.value)} /><button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5">{showPassword ? <Icon name="eyeoff" className="h-5 w-5 text-gray-500" /> : <Icon name="eye" className="h-5 w-5 text-gray-500" />}</button></div></div>{error && (<div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert"><span className="block sm:inline">{error}</span></div>)}<div><button type="submit" className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Entrar</button></div></form></div></div> ); };
const ExpensePieChart = ({ data }) => { const { width } = useWindowSize(); const isMobile = width < 768; const chartData = useMemo(() => { const categoryTotals = data.filter(t => t.type === 'expense').reduce((acc, t) => { const category = t.category || 'Sem Categoria'; acc[category] = (acc[category] || 0) + t.amount; return acc; }, {}); return Object.entries(categoryTotals).map(([name, value]) => ({ name, value })); }, [data]); if (chartData.length === 0) { return <div className="text-center text-gray-500 py-10 h-[300px] flex items-center justify-center">Sem dados de despesas para exibir no gráfico.</div>; } const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#FF1943', '#19D4FF', '#FFD419', '#8884d8', '#82ca9d', '#d88488']; return ( <ResponsiveContainer width="100%" height={isMobile ? 400 : 300}><PieChart><Pie data={chartData} dataKey="value" nameKey="name" cx={isMobile ? "50%" : "40%"} cy="50%" innerRadius={isMobile ? 50 : 60} outerRadius={isMobile ? 70 : 80} fill="#8884d8" paddingAngle={5} labelLine={false} label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`} > {chartData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)} </Pie><Tooltip formatter={(value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })} /><Legend layout={isMobile ? 'horizontal' : 'vertical'} verticalAlign={isMobile ? 'bottom' : 'middle'} align={isMobile ? 'center' : 'right'} wrapperStyle={isMobile ? { paddingTop: '20px' } : {}} iconType="circle" /></PieChart></ResponsiveContainer> ); };
const Reports = ({ transactions }) => { const getMonthStartEnd = () => { const now = new Date(); const startDate = new Date(now.getFullYear(), now.getMonth(), 1); const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0); return { start: startDate.toISOString().split('T')[0], end: endDate.toISOString().split('T')[0] }; }; const [startDate, setStartDate] = useState(getMonthStartEnd().start); const [endDate, setEndDate] = useState(getMonthStartEnd().end); const filteredTransactions = useMemo(() => { const start = new Date(startDate + 'T00:00:00'); const end = new Date(endDate + 'T23:59:59'); return transactions.filter(t => { const transDate = t.timestamp.toDate(); return transDate >= start && transDate <= end; }); }, [transactions, startDate, endDate]); const incomes = useMemo(() => filteredTransactions.filter(t => t.type === 'income'), [filteredTransactions]); const expenses = useMemo(() => filteredTransactions.filter(t => t.type === 'expense'), [filteredTransactions]); const totalIncome = useMemo(() => incomes.reduce((acc, t) => acc + t.amount, 0), [incomes]); const totalExpenses = useMemo(() => expenses.reduce((acc, t) => acc + t.amount, 0), [expenses]); const handlePrint = () => { window.print(); }; return ( <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8"><div className="bg-white p-6 rounded-2xl shadow-md no-print"><h2 className="text-2xl font-bold text-gray-800 mb-4">Relatório de Transações</h2><div className="flex flex-wrap items-center gap-4 mb-6"><div><label htmlFor="start-date" className="block text-sm font-medium text-gray-600 mb-1">Data de Início</label><input id="start-date" type="date" value={startDate} onChange={e => setStartDate(e.target.value)} className="w-full p-2 bg-gray-50 border border-gray-200 rounded-lg" /></div><div><label htmlFor="end-date" className="block text-sm font-medium text-gray-600 mb-1">Data de Fim</label><input id="end-date" type="date" value={endDate} onChange={e => setEndDate(e.target.value)} className="w-full p-2 bg-gray-50 border border-gray-200 rounded-lg" /></div><div className="self-end"><button onClick={handlePrint} className="flex items-center space-x-2 py-2 px-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition"><Icon name="printer" size={18} /><span>Imprimir</span></button></div></div></div><div className="mt-8 printable"><div className="grid grid-cols-1 md:grid-cols-2 gap-8"><div className="bg-white p-6 rounded-2xl shadow-md"><h3 className="text-xl font-bold text-green-600 mb-4">Entradas</h3><ul className="space-y-2">{incomes.map(t => (<li key={t.id} className="flex justify-between items-center border-b pb-2"><span>{t.description}</span><span className="font-semibold">{t.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span></li>))}</ul><div className="flex justify-between items-center mt-4 pt-2 border-t-2 font-bold"><span>Total de Entradas:</span><span>{totalIncome.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span></div></div><div className="bg-white p-6 rounded-2xl shadow-md"><h3 className="text-xl font-bold text-red-600 mb-4">Saídas</h3><ul className="space-y-2">{expenses.map(t => (<li key={t.id} className="flex justify-between items-center border-b pb-2"><span>{t.description}</span><span className="font-semibold">{t.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span></li>))}</ul><div className="flex justify-between items-center mt-4 pt-2 border-t-2 font-bold"><span>Total de Saídas:</span><span>{totalExpenses.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span></div></div></div></div></main> ); };
const SettingsPage = ({ setView, expenseCategories, incomeCategories, onAddCategory, onDeleteCategory }) => { const [newExpenseCat, setNewExpenseCat] = useState(''); const [newIncomeCat, setNewIncomeCat] = useState(''); const expenseSuggestions = ['Moradia', 'Alimentação', 'Transporte - Combustível', 'Transporte - Manutenção', 'Lazer', 'Educação', 'Saúde', 'Contas', 'Vestuário', 'Outros']; const incomeSuggestions = ['Salário', 'Freelance', 'Fotografia', 'Investimentos', 'Vendas', 'Outros']; const handleAddExpense = (e) => { e.preventDefault(); if (newExpenseCat.trim()) { onAddCategory('expenseCategories', newExpenseCat.trim()); setNewExpenseCat(''); } }; const handleAddIncome = (e) => { e.preventDefault(); if (newIncomeCat.trim()) { onAddCategory('incomeCategories', newIncomeCat.trim()); setNewIncomeCat(''); } }; const userExpenseNames = useMemo(() => expenseCategories.map(c => c.name), [expenseCategories]); const userIncomeNames = useMemo(() => incomeCategories.map(c => c.name), [incomeCategories]); return ( <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8"><button onClick={() => setView('dashboard')} className="mb-6 inline-flex items-center gap-2 py-2 px-4 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 font-semibold"><Icon name="arrowleft" size={18} /> Voltar</button><h1 className="text-3xl font-bold text-gray-800 mb-8"> Gerir Categorias </h1><div className="grid grid-cols-1 md:grid-cols-2 gap-12"><div><h2 className="text-2xl font-semibold text-gray-700 mb-4">Categorias de Despesa</h2><div className="bg-white p-6 rounded-2xl shadow-md"><form onSubmit={handleAddExpense} className="flex gap-2 mb-4"><input type="text" value={newExpenseCat} onChange={(e) => setNewExpenseCat(e.target.value.toUpperCase())} placeholder="NOVA CATEGORIA" className="flex-grow p-3 bg-gray-50 border border-gray-200 rounded-lg uppercase" required /><button type="submit" className="p-3 bg-red-500 text-white rounded-lg hover:bg-red-600"><Icon name="plus" /></button></form><div className="mb-6"><h3 className="text-sm font-semibold text-gray-600 mb-2">Sugestões</h3><div className="flex flex-wrap gap-2">{expenseSuggestions.filter(s => !userExpenseNames.includes(s)).map(suggestion => ( <button key={suggestion} onClick={() => onAddCategory('expenseCategories', suggestion)} className="flex items-center gap-2 text-sm py-1 px-3 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200"><CategoryIcon category={suggestion} /> {suggestion}</button> ))}</div></div><h3 className="text-lg font-semibold text-gray-700 mb-3">Suas Categorias</h3><ul className="space-y-3">{expenseCategories.length > 0 ? ( expenseCategories.map(cat => ( <li key={cat.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"><span className="font-medium text-gray-800">{cat.name}</span><button onClick={() => onDeleteCategory('expenseCategories', cat.id)} className="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full transition"><Icon name="trash2" size={18} /></button></li> )) ) : ( <p className="text-center text-gray-500 py-4">Nenhuma categoria de despesa encontrada.</p> )}</ul></div></div><div><h2 className="text-2xl font-semibold text-gray-700 mb-4">Fontes de Receita</h2><div className="bg-white p-6 rounded-2xl shadow-md"><form onSubmit={handleAddIncome} className="flex gap-2 mb-4"><input type="text" value={newIncomeCat} onChange={(e) => setNewIncomeCat(e.target.value.toUpperCase())} placeholder="NOVA FONTE DE RECEITA" className="flex-grow p-3 bg-gray-50 border border-gray-200 rounded-lg uppercase" required /><button type="submit" className="p-3 bg-green-500 text-white rounded-lg hover:bg-green-600"><Icon name="plus" /></button></form><div className="mb-6"><h3 className="text-sm font-semibold text-gray-600 mb-2">Sugestões</h3><div className="flex flex-wrap gap-2">{incomeSuggestions.filter(s => !userIncomeNames.includes(s)).map(suggestion => ( <button key={suggestion} onClick={() => onAddCategory('incomeCategories', suggestion)} className="flex items-center gap-2 text-sm py-1 px-3 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200"><CategoryIcon category={suggestion} /> {suggestion}</button>))}</div></div><h3 className="text-lg font-semibold text-gray-700 mb-3">Suas Fontes</h3><ul className="space-y-3">{incomeCategories.length > 0 ? ( incomeCategories.map(cat => ( <li key={cat.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"><span className="font-medium text-gray-800">{cat.name}</span><button onClick={() => onDeleteCategory('incomeCategories', cat.id)} className="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full transition"><Icon name="trash2" size={18} /></button></li> )) ) : ( <p className="text-center text-gray-500 py-4">Nenhuma fonte de receita encontrada.</p> )}</ul></div></div></div></main> ); };
const FinancialManager = ({ user, onLogout, setAlertMessage }) => { const transactions = useTransactions(user.uid); const debts = useDebts(user.uid); const expenseCategories = useExpenseCategories(user.uid); const incomeCategories = useIncomeCategories(user.uid); const [transactionToEdit, setTransactionToEdit] = useState(null); const [itemToDelete, setItemToDelete] = useState({id: null, type: null, data: null}); const [filterPeriod, setFilterPeriod] = useState('month'); const [debtToPay, setDebtToPay] = useState(null); const [view, setView] = useState('dashboard'); const handleAddCategory = async (collectionName, categoryName) => { if (!categoryName) return; try { await addDoc(collection(db, `users/${user.uid}/${collectionName}`), { name: categoryName }); } catch (e) { console.error("Erro ao adicionar categoria:", e); setAlertMessage("Ocorreu um erro ao adicionar a categoria."); } }; const handleDeleteCategory = async (collectionName, categoryId) => { if (!categoryId) return; try { await deleteDoc(doc(db, `users/${user.uid}/${collectionName}`, categoryId)); } catch (e) { console.error("Erro ao apagar categoria:", e); setAlertMessage("Ocorreu um erro ao apagar a categoria."); } }; const handleSaveTransaction = async (data, id) => { const batch = writeBatch(db); try { if (id) { if(data.linkedDebtId) { setAlertMessage("Não é possível editar uma transação de pagamento. Apague-a e crie uma nova."); return; } const transRef = doc(db, `users/${user.uid}/transactions`, id); batch.update(transRef, data); } else { const newTransRef = doc(collection(db, `users/${user.uid}/transactions`)); batch.set(newTransRef, data); if (data.category === 'Pagamento de Dívida' && data.linkedDebtId) { const debtRef = doc(db, `users/${user.uid}/debts`, data.linkedDebtId); const debtDoc = await getDoc(debtRef); if(debtDoc.exists()){ const debtData = debtDoc.data(); const newPaidAmount = debtData.paidAmount + data.amount; const newStatus = newPaidAmount >= debtData.totalAmount ? 'paid' : 'active'; batch.update(debtRef, { paidAmount: newPaidAmount, status: newStatus }); } } } await batch.commit(); } catch (e) { console.error("Erro ao guardar transação:", e); setAlertMessage("Ocorreu um erro ao guardar a transação."); } }; const handleSaveDebt = async (data) => { try { await addDoc(collection(db, `users/${user.uid}/debts`), data); } catch (e) { console.error("Erro ao guardar dívida:", e); setAlertMessage("Ocorreu um erro ao guardar a dívida."); } }; const handleDeleteConfirmation = (id, type, data = null) => setItemToDelete({id, type, data}); const handleDelete = async () => { if (!itemToDelete.id) return; const { id, type, data } = itemToDelete; const batch = writeBatch(db); const path = `users/${user.uid}/${type}s`; const docRef = doc(db, path, id); try { if (type === 'transaction' && data?.linkedDebtId) { const debtRef = doc(db, `users/${user.uid}/debts`, data.linkedDebtId); const debtDoc = await getDoc(debtRef); if (debtDoc.exists()) { const debtData = debtDoc.data(); const newPaidAmount = debtData.paidAmount - data.amount; batch.update(debtRef, { paidAmount: newPaidAmount < 0 ? 0 : newPaidAmount, status: 'active' }); } } else if (type === 'debt') { const transQuery = query(collection(db, `users/${user.uid}/transactions`), where("linkedDebtId", "==", id)); const transSnapshot = await getDocs(transQuery); if (!transSnapshot.empty) { setAlertMessage("Não é possível apagar uma dívida com pagamentos registados. Apague primeiro os pagamentos."); setItemToDelete({id: null, type: null, data: null}); return; } } batch.delete(docRef); await batch.commit(); } catch (e) { console.error("Erro ao apagar item:", e); setAlertMessage("Ocorreu um erro ao apagar."); } finally { setItemToDelete({id: null, type: null, data: null}); } }; const handleMakePayment = async (paymentAmount) => { if (!debtToPay || !paymentAmount || paymentAmount <= 0) return; const batch = writeBatch(db); const newTransRef = doc(collection(db, `users/${user.uid}/transactions`)); batch.set(newTransRef, { description: `Pagamento: ${debtToPay.description}`.toUpperCase(), amount: paymentAmount, type: 'expense', category: 'Pagamento de Dívida', timestamp: Timestamp.now(), linkedDebtId: debtToPay.id }); const debtRef = doc(db, `users/${user.uid}/debts`, debtToPay.id); const newPaidAmount = debtToPay.paidAmount + paymentAmount; const newStatus = newPaidAmount >= debtToPay.totalAmount ? 'paid' : 'active'; batch.update(debtRef, { paidAmount: newPaidAmount, status: newStatus }); try { await batch.commit(); setDebtToPay(null); } catch (e) { console.error("Erro ao processar pagamento:", e); setAlertMessage("Ocorreu um erro ao processar o pagamento."); } }; const filteredTransactions = useMemo(() => { if (filterPeriod === 'month') { const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1); return transactions.filter(t => t.timestamp && t.timestamp.toDate() >= startOfMonth); } return transactions; }, [transactions, filterPeriod]); const { totalIncome, totalExpenses, balance } = useMemo(() => { const income = filteredTransactions.filter(t => t.type === 'income').reduce((acc, t) => acc + t.amount, 0); const expenses = filteredTransactions.filter(t => t.type === 'expense').reduce((acc, t) => acc + t.amount, 0); return { totalIncome: income, totalExpenses: expenses, balance: income - expenses }; }, [filteredTransactions]); const activeDebts = useMemo(() => debts.filter(d => d.status === 'active'), [debts]); const totalActiveDebt = useMemo(() => activeDebts.reduce((acc, d) => acc + (d.totalAmount - d.paidAmount), 0), [activeDebts]); return ( <div className="bg-gray-50 min-h-screen font-sans text-gray-900"><ConfirmationModal isOpen={!!itemToDelete.id} onClose={() => setItemToDelete({id: null, type: null, data: null})} onConfirm={handleDelete} title="Confirmar Exclusão" message="Tem a certeza que deseja apagar este item? Esta ação não pode ser desfeita." /><PaymentModal isOpen={!!debtToPay} onClose={() => setDebtToPay(null)} onConfirm={handleMakePayment} debt={debtToPay} /><header className="bg-white shadow-sm sticky top-0 z-20 no-print"><div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center"><div className="flex items-center space-x-3"><button onClick={() => setView('dashboard')} className="flex items-center gap-3"><Icon name="wallet" className="text-indigo-600" size={32} /><h1 className="text-xl md:text-2xl font-bold text-gray-800">O Meu Gestor</h1></button></div><div className="flex items-center space-x-2 md:space-x-4"><button onClick={() => setView('reports')} title="Relatórios" className="p-2 text-gray-500 hover:text-indigo-600 hover:bg-indigo-100 rounded-full transition-colors"><Icon name="barchart" size={20} /></button><button onClick={() => setView('settings')} title="Configurações" className="p-2 text-gray-500 hover:text-indigo-600 hover:bg-indigo-100 rounded-full transition-colors"><Icon name="settings" size={20} /></button><div className="text-right"><p className="text-sm text-gray-600 truncate max-w-[150px] md:max-w-full">{user.email}</p></div><button onClick={onLogout} title="Sair" className="p-2 text-gray-500 hover:text-red-600 hover:bg-red-100 rounded-full transition-colors"><Icon name="logout" size={20} /></button></div></div></header>{view === 'dashboard' && ( <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8"><section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"><SummaryCard title="Receitas (Mês)" value={totalIncome} iconName="arrowupcircle" colorClass="bg-green-100 text-green-800" /><SummaryCard title="Despesas (Mês)" value={totalExpenses} iconName="arrowdowncircle" colorClass="bg-red-100 text-red-800" /><SummaryCard title="Saldo (Mês)" value={balance} iconName="dollarsign" colorClass="bg-indigo-100 text-indigo-800" /><SummaryCard title="Dívidas Ativas" value={totalActiveDebt} iconName="banknote" colorClass="bg-orange-100 text-orange-800" /></section><div className="bg-white p-6 rounded-2xl shadow-md mb-8"><h2 className="text-2xl font-bold text-gray-800 mb-4">Distribuição de Despesas (Mês)</h2><ExpensePieChart data={filteredTransactions} /></div><div className="grid grid-cols-1 lg:grid-cols-5 gap-8 mb-8"><div className="lg:col-span-2"><TransactionForm onSave={handleSaveTransaction} transactionToEdit={transactionToEdit} setTransactionToEdit={setTransactionToEdit} activeDebts={activeDebts} userId={user.uid} expenseCategories={expenseCategories} incomeCategories={incomeCategories}/></div><div className="lg:col-span-3"><div className="bg-white p-6 rounded-2xl shadow-md h-full"><div className="flex justify-between items-center mb-4"><h2 className="text-2xl font-bold text-gray-800">Histórico de Transações</h2><div className="flex bg-gray-100 rounded-full p-1 shadow-sm border"><button onClick={() => setFilterPeriod('month')} className={`px-4 py-1.5 rounded-full text-sm font-semibold transition ${filterPeriod === 'month' ? 'bg-indigo-600 text-white' : 'text-gray-600'}`}>Mês Atual</button><button onClick={() => setFilterPeriod('all')} className={`px-4 py-1.5 rounded-full text-sm font-semibold transition ${filterPeriod === 'all' ? 'bg-indigo-600 text-white' : 'text-gray-600'}`}>Tudo</button></div></div>{transactions.length === 0 ? <div className="text-center py-8 px-4 border-2 border-dashed rounded-lg h-full flex flex-col justify-center"><Icon name="receipttext" size={40} className="mx-auto text-gray-300" /><p className="mt-2 text-gray-500 font-semibold">Nenhuma transação encontrada.</p></div> : <ul className="space-y-3 max-h-[500px] overflow-y-auto pr-2">{filteredTransactions.map(t => <TransactionItem key={t.id} transaction={t} onEdit={setTransactionToEdit} onDelete={(id, data) => handleDeleteConfirmation(id, 'transaction', data)} />)}</ul>}</div></div></div><hr className="my-8" /><div><h2 className="text-2xl font-bold text-gray-800 mb-6">Dívidas Ativas</h2><div className="grid grid-cols-1 lg:grid-cols-5 gap-8"><div className="lg:col-span-2"><DebtForm onSave={handleSaveDebt} /></div><div className="lg:col-span-3"><div className="bg-white p-6 rounded-2xl shadow-md">{debts.length === 0 ? <div className="text-center py-8"><Icon name="landmark" size={40} className="mx-auto text-gray-300" /><p className="mt-2 text-gray-500 font-semibold">Nenhuma dívida ativa.</p><p className="text-sm text-gray-400">Adicione as suas dívidas para começar a acompanhá-las.</p></div> : <ul className="space-y-3">{activeDebts.map(d => <DebtItem key={d.id} debt={d} onPay={setDebtToPay} onDelete={(id, data) => handleDeleteConfirmation(id, 'debt', data)} />)}</ul>}</div></div></div></div></main> )}{view === 'reports' && <Reports transactions={transactions} />}{view === 'settings' && <SettingsPage setView={setView} expenseCategories={expenseCategories} incomeCategories={incomeCategories} onAddCategory={handleAddCategory} onDeleteCategory={handleDeleteCategory} />}</div> ); };

// --- COMPONENTE PRINCIPAL (APP) ---
export default function App() {
    const { user, loading } = useAuth();
    const [alertMessage, setAlertMessage] = useState('');
    const handleLogin = async (email, password) => {
        try { await signInWithEmailAndPassword(auth, email, password); }
        catch (error) { alert("Falha no login: " + error.message); }
    };
    const handleLogout = async () => {
        try { await signOut(auth); }
        catch (error) { console.error("Erro ao fazer logout:", error); }
    };

    if (loading) {
        return <div className="flex justify-center items-center h-screen bg-gray-100"><div className="text-center"><Icon name="wallet" size={48} className="mx-auto text-indigo-500 animate-bounce" /><p className="mt-4 text-lg font-semibold text-gray-700">A ligar...</p></div></div>;
    }

    return (
        <div>
            <AlertModal message={alertMessage} onClose={() => setAlertMessage('')} />
            {user ? (<FinancialManager user={user} onLogout={handleLogout} setAlertMessage={setAlertMessage} />)
                : (<LoginScreen onLogin={handleLogin} />)}
        </div>
    );
}
